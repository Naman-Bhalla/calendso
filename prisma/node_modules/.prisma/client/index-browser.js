
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.0.2
 * Query Engine version: 2452cc6313d52b8b9a96999ac0e974d0aedf88db
 */
Prisma.prismaVersion = {
  client: "3.0.2",
  engine: "2452cc6313d52b8b9a96999ac0e974d0aedf88db"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.EventTypeScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  locations: 'locations',
  length: 'length',
  hidden: 'hidden',
  userId: 'userId',
  teamId: 'teamId',
  eventName: 'eventName',
  timeZone: 'timeZone',
  periodType: 'periodType',
  periodStartDate: 'periodStartDate',
  periodEndDate: 'periodEndDate',
  periodDays: 'periodDays',
  periodCountCalendarDays: 'periodCountCalendarDays',
  requiresConfirmation: 'requiresConfirmation',
  minimumBookingNotice: 'minimumBookingNotice',
  schedulingType: 'schedulingType'
});

exports.Prisma.CredentialScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  key: 'key',
  userId: 'userId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  bio: 'bio',
  avatar: 'avatar',
  timeZone: 'timeZone',
  weekStart: 'weekStart',
  startTime: 'startTime',
  endTime: 'endTime',
  bufferTime: 'bufferTime',
  hideBranding: 'hideBranding',
  theme: 'theme',
  createdDate: 'createdDate',
  completedOnboarding: 'completedOnboarding',
  plan: 'plan'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  bio: 'bio',
  hideBranding: 'hideBranding'
});

exports.Prisma.MembershipScalarFieldEnum = makeEnum({
  teamId: 'teamId',
  userId: 'userId',
  accepted: 'accepted',
  role: 'role'
});

exports.Prisma.VerificationRequestScalarFieldEnum = makeEnum({
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BookingReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  uid: 'uid',
  bookingId: 'bookingId'
});

exports.Prisma.AttendeeScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  timeZone: 'timeZone',
  bookingId: 'bookingId'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  userId: 'userId',
  eventTypeId: 'eventTypeId',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmed: 'confirmed',
  rejected: 'rejected',
  status: 'status'
});

exports.Prisma.ScheduleScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  eventTypeId: 'eventTypeId',
  title: 'title',
  freeBusyTimes: 'freeBusyTimes'
});

exports.Prisma.AvailabilityScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  userId: 'userId',
  eventTypeId: 'eventTypeId',
  days: 'days',
  startTime: 'startTime',
  endTime: 'endTime',
  date: 'date'
});

exports.Prisma.SelectedCalendarScalarFieldEnum = makeEnum({
  userId: 'userId',
  integration: 'integration',
  externalId: 'externalId'
});

exports.Prisma.EventTypeCustomInputScalarFieldEnum = makeEnum({
  id: 'id',
  eventTypeId: 'eventTypeId',
  label: 'label',
  type: 'type',
  required: 'required',
  placeholder: 'placeholder'
});

exports.Prisma.ResetPasswordRequestScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  expires: 'expires'
});

exports.Prisma.ReminderMailScalarFieldEnum = makeEnum({
  id: 'id',
  referenceId: 'referenceId',
  reminderType: 'reminderType',
  elapsedMinutes: 'elapsedMinutes',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.SchedulingType = makeEnum({
  ROUND_ROBIN: 'ROUND_ROBIN',
  COLLECTIVE: 'COLLECTIVE'
});

exports.UserPlan = makeEnum({
  FREE: 'FREE',
  TRIAL: 'TRIAL',
  PRO: 'PRO'
});

exports.MembershipRole = makeEnum({
  MEMBER: 'MEMBER',
  OWNER: 'OWNER'
});

exports.BookingStatus = makeEnum({
  CANCELLED: 'CANCELLED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  PENDING: 'PENDING'
});

exports.EventTypeCustomInputType = makeEnum({
  TEXT: 'TEXT',
  TEXTLONG: 'TEXTLONG',
  NUMBER: 'NUMBER',
  BOOL: 'BOOL'
});

exports.ReminderType = makeEnum({
  PENDING_BOOKING_CONFIRMATION: 'PENDING_BOOKING_CONFIRMATION'
});

exports.Prisma.ModelName = makeEnum({
  EventType: 'EventType',
  Credential: 'Credential',
  User: 'User',
  Team: 'Team',
  Membership: 'Membership',
  VerificationRequest: 'VerificationRequest',
  BookingReference: 'BookingReference',
  Attendee: 'Attendee',
  Booking: 'Booking',
  Schedule: 'Schedule',
  Availability: 'Availability',
  SelectedCalendar: 'SelectedCalendar',
  EventTypeCustomInput: 'EventTypeCustomInput',
  ResetPasswordRequest: 'ResetPasswordRequest',
  ReminderMail: 'ReminderMail'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
